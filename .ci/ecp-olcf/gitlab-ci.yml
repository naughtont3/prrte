variables:
  SCHEDULER_PARAMETERS: "-P STF010 -W 10 -nnodes 1 -alloc_flags gpumps"
  GIT_STRATEGY: clone
  EXTERNAL_WORKDIR: /gpfs/wolf/proj-shared/stf010/ci/ompi-x/naughtont3-prrte/${CI_JOB_ID}
  # The TMPDIR does not have the jobid, so spans instances/sections
  EXTERNAL_TMPDIR: /gpfs/wolf/proj-shared/stf010/ci/ompi-x/naughtont3-prrte


#
# NOTE: See also https://ecp-ci.gitlab.io/docs/guides/build-status-gitlab.html
#

#### Build and Test using GPFS ####
stages:
  - .pre
  - build-nobatch-gpfs
  - test-gpfs
  - .post

.shell-runner:
  tags: [nobatch]

.report-status:
  variables:
    # You can define ALL BUILDSTATUS_ variables here, with the
    # exception of the TOKEN if it makes it easier to manage.
    BUILDSTATUS_OWNER: naughtont3
    BUILDSTATUS_PROJECT: prrte
    BUILDSTATUS_APIURL: https://api.github.com
    BUILDSTATUS_JOB: OLCF
  before_script:
    #  echo "DBG starting before-script section"
    #  echo "DBG BUILDSTATUS_OWNER=$BUILDSTATUS_OWNER"
    #  echo "DBG BUILDSTATUS_PROJECT=$BUILDSTATUS_PROJECT"
    #  echo "DBG BUILDSTATUS_APIURL=$BUILDSTATUS_APIURL"
    #  echo "DBG BUILDSTATUS_JOB=$BUILDSTATUS_JOB"
    #  echo "DBG CI_JOB_NAME=$CI_JOB_NAME"
    #  echo "DBG CI_PIPELINE_URL=$CI_PIPELINE_URL"
    #  echo "DBG CI_PROJECT_DIR=$CI_PROJECT_DIR"
    #
    # TJN Just using a static venv in home space on filesystem like UMS pieces.
    #     The following steps were run *manually* on the native system.
    #
    #           ml py-virtualenv python/3.7.0
    #           python -m venv venv3.7.0
    #           source venv3.7.0/bin/activate
    #           pip install requests
    #
    - source /ccsopen/home/tjn3/ums/ompix/scripts/venv3.7.0/bin/activate
  script:
    # ls -l /ccsopen/home/tjn3/ums/ompix/scripts/build-status.py
    - echo "DBG Running python build-status.py script"
    - python /ccsopen/home/tjn3/ums/ompix/scripts/build-status.py
  dependencies: []
  cache:
    key: python-requests
    paths:
      - $CI_PROJECT_DIR/env/
    policy: pull

pending:
  extends:
    - .report-status
    - .shell-runner
  stage: .pre
  cache:
    key: python-requests
    paths:
      - $CI_PROJECT_DIR/env/
    policy: pull-push

success:
  extends:
    - .report-status
    - .shell-runner
  stage: .post

# IMPORANT, if you are using GitHub as opposed to GitLab as your
# API target this job name must be changed to 'failure' (gitlab is 'failed')
failure:
  extends:
    - .report-status
    - .shell-runner
  stage: .post
  when: on_failure

build-nobatch-gpfs:
  stage: build-nobatch-gpfs
  before_script:
    - echo "NOTE - Starting GPFS build before-script"
    # Use work directory on shared filesystem accessible to compute nodes
    - module load gcc/6.4.0
    - module load git
    - module use /ccsopen/home/tjn3/ums/ompix/gcc/6.4.0/modules
    - module unload spectrum-mpi xalt
    - module load pandoc
    # We get cuda from ucx load
    - module load libevent/2.1.12
    - module load hwloc/2.3.0
    # TJN: For now just use whatever pmix/master we have available
    - module load pmix/master
    - module load ucx/1.9.0
    - module list
    - git clone ${CI_PROJECT_DIR} ${EXTERNAL_WORKDIR}/source
    - cd ${EXTERNAL_WORKDIR}/source
    - git submodule update --init
    - git checkout --detach ${CI_COMMIT_SHA}
  script:
    - echo "NOTE - Starting GPFS build script"
    - module list
    - pwd
    - ./autogen.pl
    - ./configure --prefix=${EXTERNAL_WORKDIR}/install_test --enable-prte-prefix-by-default --with-libevent=${UMS_OMPIX_LIBEVENT_DIR} --with-hwloc=${UMS_OMPIX_HWLOC_DIR} --with-pmix=${UMS_OMPIX_PMIX_DIR}
    - make -j 8 install
    - make check
    - export PATH=${EXTERNAL_WORKDIR}/install_test/bin:$PATH
    #- cd examples/
    #- make
    - echo ${EXTERNAL_WORKDIR} > ${EXTERNAL_TMPDIR}/path.txt
    #- ls -l ${EXTERNAL_TMPDIR}/path.txt
    - cat ${EXTERNAL_TMPDIR}/path.txt
    - echo "NOTE - End GPFS build script"
  after_script:
    # clean up the directory
    #- rm -rf ${EXTERNAL_WORKDIR}
  artifacts:
      name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
      untracked: true
      #paths:
      #  - examples
      expire_in: 1 week
  tags:
    - nobatch



test-gpfs:
  stage: test-gpfs
  dependencies:
    - build-nobatch-gpfs
  before_script:
    - echo "NOTE - Starting GPFS test before-script"
    - module load gcc/6.4.0
    - module load git
    - module use /ccsopen/home/tjn3/ums/ompix/gcc/6.4.0/modules
    - module unload spectrum-mpi xalt
    - module load pandoc
    # We get cuda from ucx load
    - module load libevent/2.1.12
    - module load hwloc/2.3.0
    # TJN: For now just use whatever pmix/master we have available
    - module load pmix/master
    - module load ucx/1.9.0
    - module list
    - cd /gpfs/wolf/proj-shared/stf010/ci/ompi-x/naughtont3-prrte
    - echo "NOTE - End GPFS test before-script"
  script:
    - echo "NOTE - Starting GPFS test script"
    - module list
    - pwd
    - cat ${EXTERNAL_TMPDIR}/path.txt
    - BUILD_DIR=`cat ${EXTERNAL_TMPDIR}/path.txt`
    #- ls -l ${EXTERNAL_TMPDIR}/path.txt
    #- ls -l $BUILD_DIR
    #- ls -l $BUILD_DIR/install_test
    #- ls -l $BUILD_DIR/source/examples
    - echo "NOTE - Extend PATH with ${BUILD_DIR}/install_test/bin"
    - export PATH=$BUILD_DIR/install_test/bin:$PATH
    - which prterun
    - echo "----Our hosts---"
    - cat $LSB_DJOB_HOSTFILE | sort | uniq
    - echo "----------------"
    # Move to previously compiled examples directory in sources tree
    - cd ${BUILD_DIR}/source/examples
    #- "jsrun -n1 hostname"
    #- ldd ./hello_c
    #- PRTERUN_ARGS="--hostfile $LSB_DJOB_HOSTFILE --np 20 --map-by node:NOLOCAL --bind-to core"
    - PRTERUN_ARGS="--hostfile $LSB_DJOB_HOSTFILE --np 1 --map-by node:NOLOCAL --bind-to core"
      # - prterun $PRTERUN_ARGS hostname
    - prterun -x LD_LIBRARY_PATH --hostfile ${LSB_DJOB_HOSTFILE} --np 1 --map-by node:NOLOCAL --bind-to core hostname
    - echo "NOTE - End GPFS test script"
  after_script:
    # clean up directory
    - cd /gpfs/wolf/proj-shared/stf010/ci/ompi-x/naughtont3-prrte
    #- ls -l ${EXTERNAL_TMPDIR}/path.txt
    - BUILD_DIR=`cat ${EXTERNAL_TMPDIR}/path.txt`
    # TJN: disable for now
    #- rm -rf $BUILD_DIR
  tags:
    - batch
